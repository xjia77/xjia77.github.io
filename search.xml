<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Douban Movie Scraper</title>
    <url>/2022/01/12/Douban-Movie-Scraper/</url>
    <content><![CDATA[<p>Python3-based Douban Movie/Douban Book Scarpy crawler for cover downloading + data crawling + review entry.</p>
<p>The purpose of maintaining this project is to share some of my practice in the process of using Scrapy, the project covers about 80% of my knowledge of Scrapy, I hope to help friends who are learning Scrapy, please note that the current version of the project is Scrapy 2.5.0.</p>
<h3 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h3><p>Project contains douban_scrapyd douban_db douban_adminer three containers.</p>
<p>The douban_scrapyd container is based on <a href="https://pythonspeed.com/articles/base-image-python-docker-images/">python:3.9-slim-buster</a>, the default installed Python3 libraries are scrapy scrapyd pymysql pillow arrow, default mapping port 6800:6800 to facilitate user access to scrapyd management interface via host IP:6800, login required parameters, username:scrapyd password:public.</p>
<p>The douban_db container is based on mysql:8, root password is public, and the default initialization is to import the docker/mysql/douban.sql file to the douban database.</p>
<p>douban_adminer container is based on adminer:4, default mapping port 8080:8080 to facilitate users to access the database management interface through the host IP:8080, login required parameters, server:mysql username:root password:public.</p>
<h3 id="Project-SQL"><a href="#Project-SQL" class="headerlink" title="Project SQL"></a>Project SQL</h3><p>The path to the SQL file used by the project is docker/mysql/douban.sql.</p>
<h3 id="Collection-Process"><a href="#Collection-Process" class="headerlink" title="Collection Process"></a>Collection Process</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">First collect Subject ID --&gt; <span class="keyword">then</span> crawl the detail page by Subject ID to collect data --&gt; finally collect comments by Subject ID</span><br></pre></td></tr></table></figure>

<h3 id="method"><a href="#method" class="headerlink" title="method"></a>method</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/xjia77/ScrapyDouban.git</span><br><span class="line"><span class="comment"># Build and run containers</span></span><br><span class="line">$ <span class="built_in">cd</span> ./ScrapyDouban/docker</span><br><span class="line">$ sudo docker-compose up --build -d</span><br><span class="line"><span class="comment"># enter douban_scrapyd container</span></span><br><span class="line">$ sudo docker <span class="built_in">exec</span> -it douban_scrapyd bash</span><br><span class="line"><span class="comment"># enter scrapy content</span></span><br><span class="line">$ <span class="built_in">cd</span> /srv/ScrapyDouban/scrapy</span><br><span class="line">$ scrapy list</span><br><span class="line"><span class="comment"># Grabbing movie data</span></span><br><span class="line">$ scrapy crawl movie_subject <span class="comment"># collect movie Subject ID</span></span><br><span class="line">$ scrapy crawl movie_meta <span class="comment"># collect movie data</span></span><br><span class="line">$ scrapy crawl movie_comment <span class="comment"># collect movie comment</span></span><br><span class="line"><span class="comment"># Grabbing book data</span></span><br><span class="line">$ scrapy crawl book_subject <span class="comment"># collect book Subject ID</span></span><br><span class="line">$ scrapy crawl book_meta <span class="comment"># collect book data</span></span><br><span class="line">$ scrapy crawl book_comment <span class="comment"># collect book comment</span></span><br></pre></td></tr></table></figure>


<h3 id="Proxy-IP"><a href="#Proxy-IP" class="headerlink" title="Proxy IP"></a>Proxy IP</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Due to douban<span class="string">&#x27;s anti-crawler mechanism, the only way to bypass it now is through a proxy IP. ProxyMiddleware middleware is not enabled in the default settings.py. If you really need to use Douban&#x27;</span>s data to <span class="keyword">do</span> some research, you can go rent a paid proxy pool.</span><br></pre></td></tr></table></figure>

<h3 id="image-download"><a href="#image-download" class="headerlink" title="image download"></a>image download</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">douban.pipelines.CoverPipeline processes the cover download logic by filtering spider.name, and the save path of the downloaded image files is the /srv/ScrapyDouban/storage directory of the douban_scrapy container.</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>Python</tag>
        <tag>Scarpy</tag>
      </tags>
  </entry>
  <entry>
    <title>Git Tutorial</title>
    <url>/2022/07/21/Git%20Tutorial/</url>
    <content><![CDATA[<h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><p>Git is a distributed version control system.</p>
<h3 id="Centralized-amp-Distributed"><a href="#Centralized-amp-Distributed" class="headerlink" title="Centralized &amp; Distributed"></a>Centralized &amp; Distributed</h3><p>First of all, centralized version control system, the repository is centrally stored in the central server, and when you work, you use your own computer, so you have to get the latest version from the central server first, then start working, and when you finish working, push your work to the central server. The biggest problem with centralized version control systems is that they must be networked to work.</p>
<p>A distributed version control system has no “central server” at all. Everyone has a complete repository on their computer, so you don’t need to be connected to the Internet when you work, because the repository is on your own computer. Since there is a complete repository on each person’s computer, how can multiple people collaborate? Let’s say you change file A on your own computer, and your colleague also changes file A on his computer. At that time, you two just push your respective changes to each other, and you can see each other’s changes.</p>
]]></content>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>HashSet source code analysis</title>
    <url>/2022/07/17/HashSet%20source%20code%20analysis/</url>
    <content><![CDATA[<h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><p>HashSet is implemented based on HashMap and is a collection that does not allow duplicate elements.</p>
<p>HashSet allows null values.</p>
<p>HashSet is unordered, i.e. it does not keep track of the order of insertion.</p>
<p>HashSet is not thread-safe, and if multiple threads try to modify the HashSet at the same time, the final result is uncertain.</p>
<p>By default, a HashSet is a set with a capacity of 16 and a loading factor of 0.75. All the values of a hashset are the keys of a hashmap, and the values of all the keys are a uniform value.</p>
<blockquote>
<p>HashSet insertion can also be ordered, as long as the capacity and loading factor are specified, this constructor method is implemented with LinkedHashMap. However, this constructor does not have a modifier to modify, he provides to the subclass LinkedHashSet use.</p>
</blockquote>
<h3 id="Source-Code"><a href="#Source-Code" class="headerlink" title="Source Code"></a>Source Code</h3><p>The source code is simple, it is a direct call to the hashmap operation.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashSet</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">extends</span> <span class="title">AbstractSet</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">implements</span> <span class="title">Set</span>&lt;<span class="title">E</span>&gt;, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">5024744406713321676L</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> HashMap&lt;E,Object&gt; map;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Dummy value to associate with an Object in the backing Map</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object PRESENT = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Constructs a new, empty set; the backing &lt;tt&gt;HashMap&lt;/tt&gt; instance has</span></span><br><span class="line"><span class="comment">* default initial capacity (16) and load factor (0.75).</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashSet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Constructs a new set containing the elements in the specified</span></span><br><span class="line"><span class="comment">* collection.  The &lt;tt&gt;HashMap&lt;/tt&gt; is created with default load factor</span></span><br><span class="line"><span class="comment">* (0.75) and an initial capacity sufficient to contain the elements in</span></span><br><span class="line"><span class="comment">* the specified collection.</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> c the collection whose elements are to be placed into this set</span></span><br><span class="line"><span class="comment">* <span class="doctag">@throws</span> NullPointerException if the specified collection is null</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashSet</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class="line">map = <span class="keyword">new</span> HashMap&lt;&gt;(Math.max((<span class="keyword">int</span>) (c.size()/<span class="number">.75f</span>) + <span class="number">1</span>, <span class="number">16</span>));</span><br><span class="line">addAll(c);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Constructs a new, empty set; the backing &lt;tt&gt;HashMap&lt;/tt&gt; instance has</span></span><br><span class="line"><span class="comment">* the specified initial capacity and the specified load factor.</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span>      initialCapacity   the initial capacity of the hash map</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span>      loadFactor        the load factor of the hash map</span></span><br><span class="line"><span class="comment">* <span class="doctag">@throws</span>     IllegalArgumentException if the initial capacity is less</span></span><br><span class="line"><span class="comment">*             than zero, or if the load factor is nonpositive</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashSet</span><span class="params">(<span class="keyword">int</span> initialCapacity, <span class="keyword">float</span> loadFactor)</span> </span>&#123;</span><br><span class="line">map = <span class="keyword">new</span> HashMap&lt;&gt;(initialCapacity, loadFactor);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Constructs a new, empty set; the backing &lt;tt&gt;HashMap&lt;/tt&gt; instance has</span></span><br><span class="line"><span class="comment">* the specified initial capacity and default load factor (0.75).</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span>      initialCapacity   the initial capacity of the hash table</span></span><br><span class="line"><span class="comment">* <span class="doctag">@throws</span>     IllegalArgumentException if the initial capacity is less</span></span><br><span class="line"><span class="comment">*             than zero</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashSet</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</span><br><span class="line">map = <span class="keyword">new</span> HashMap&lt;&gt;(initialCapacity);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Constructs a new, empty linked hash set.  (This package private</span></span><br><span class="line"><span class="comment">* constructor is only used by LinkedHashSet.) The backing</span></span><br><span class="line"><span class="comment">* HashMap instance is a LinkedHashMap with the specified initial</span></span><br><span class="line"><span class="comment">* capacity and the specified load factor.</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span>      initialCapacity   the initial capacity of the hash map</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span>      loadFactor        the load factor of the hash map</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span>      dummy             ignored (distinguishes this</span></span><br><span class="line"><span class="comment">*             constructor from other int, float constructor.)</span></span><br><span class="line"><span class="comment">* <span class="doctag">@throws</span>     IllegalArgumentException if the initial capacity is less</span></span><br><span class="line"><span class="comment">*             than zero, or if the load factor is nonpositive</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">HashSet(<span class="keyword">int</span> initialCapacity, <span class="keyword">float</span> loadFactor, <span class="keyword">boolean</span> dummy) &#123;</span><br><span class="line">map = <span class="keyword">new</span> LinkedHashMap&lt;&gt;(initialCapacity, loadFactor);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Returns an iterator over the elements in this set.  The elements</span></span><br><span class="line"><span class="comment">* are returned in no particular order.</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> an Iterator over the elements in this set</span></span><br><span class="line"><span class="comment">* <span class="doctag">@see</span> ConcurrentModificationException</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Iterator&lt;E&gt; <span class="title">iterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> map.keySet().iterator();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Returns the number of elements in this set (its cardinality).</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> the number of elements in this set (its cardinality)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> map.size();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Returns &lt;tt&gt;true&lt;/tt&gt; if this set contains no elements.</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> &lt;tt&gt;true&lt;/tt&gt; if this set contains no elements</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> map.isEmpty();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Returns &lt;tt&gt;true&lt;/tt&gt; if this set contains the specified element.</span></span><br><span class="line"><span class="comment">* More formally, returns &lt;tt&gt;true&lt;/tt&gt; if and only if this set</span></span><br><span class="line"><span class="comment">* contains an element &lt;tt&gt;e&lt;/tt&gt; such that</span></span><br><span class="line"><span class="comment">* &lt;tt&gt;(o==null&amp;nbsp;?&amp;nbsp;e==null&amp;nbsp;:&amp;nbsp;o.equals(e))&lt;/tt&gt;.</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> o element whose presence in this set is to be tested</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> &lt;tt&gt;true&lt;/tt&gt; if this set contains the specified element</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> map.containsKey(o);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Adds the specified element to this set if it is not already present.</span></span><br><span class="line"><span class="comment">* More formally, adds the specified element &lt;tt&gt;e&lt;/tt&gt; to this set if</span></span><br><span class="line"><span class="comment">* this set contains no element &lt;tt&gt;e2&lt;/tt&gt; such that</span></span><br><span class="line"><span class="comment">* &lt;tt&gt;(e==null&amp;nbsp;?&amp;nbsp;e2==null&amp;nbsp;:&amp;nbsp;e.equals(e2))&lt;/tt&gt;.</span></span><br><span class="line"><span class="comment">* If this set already contains the element, the call leaves the set</span></span><br><span class="line"><span class="comment">* unchanged and returns &lt;tt&gt;false&lt;/tt&gt;.</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> e element to be added to this set</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> &lt;tt&gt;true&lt;/tt&gt; if this set did not already contain the specified</span></span><br><span class="line"><span class="comment">* element</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> map.put(e, PRESENT)==<span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Removes the specified element from this set if it is present.</span></span><br><span class="line"><span class="comment">* More formally, removes an element &lt;tt&gt;e&lt;/tt&gt; such that</span></span><br><span class="line"><span class="comment">* &lt;tt&gt;(o==null&amp;nbsp;?&amp;nbsp;e==null&amp;nbsp;:&amp;nbsp;o.equals(e))&lt;/tt&gt;,</span></span><br><span class="line"><span class="comment">* if this set contains such an element.  Returns &lt;tt&gt;true&lt;/tt&gt; if</span></span><br><span class="line"><span class="comment">* this set contained the element (or equivalently, if this set</span></span><br><span class="line"><span class="comment">* changed as a result of the call).  (This set will not contain the</span></span><br><span class="line"><span class="comment">* element once the call returns.)</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> o object to be removed from this set, if present</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> &lt;tt&gt;true&lt;/tt&gt; if the set contained the specified element</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> map.remove(o)==PRESENT;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Removes all of the elements from this set.</span></span><br><span class="line"><span class="comment">* The set will be empty after this call returns.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">map.clear();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Returns a shallow copy of this &lt;tt&gt;HashSet&lt;/tt&gt; instance: the elements</span></span><br><span class="line"><span class="comment">* themselves are not cloned.</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> a shallow copy of this set</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">clone</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">HashSet&lt;E&gt; newSet = (HashSet&lt;E&gt;) <span class="keyword">super</span>.clone();</span><br><span class="line">newSet.map = (HashMap&lt;E, Object&gt;) map.clone();</span><br><span class="line"><span class="keyword">return</span> newSet;</span><br><span class="line">&#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> InternalError(e);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Save the state of this &lt;tt&gt;HashSet&lt;/tt&gt; instance to a stream (that is,</span></span><br><span class="line"><span class="comment">* serialize it).</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@serialData</span> The capacity of the backing &lt;tt&gt;HashMap&lt;/tt&gt; instance</span></span><br><span class="line"><span class="comment">*             (int), and its load factor (float) are emitted, followed by</span></span><br><span class="line"><span class="comment">*             the size of the set (the number of elements it contains)</span></span><br><span class="line"><span class="comment">*             (int), followed by all of its elements (each an Object) in</span></span><br><span class="line"><span class="comment">*             no particular order.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">writeObject</span><span class="params">(java.io.ObjectOutputStream s)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> java.io.IOException </span>&#123;</span><br><span class="line"><span class="comment">// Write out any hidden serialization magic</span></span><br><span class="line">s.defaultWriteObject();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Write out HashMap capacity and load factor</span></span><br><span class="line">s.writeInt(map.capacity());</span><br><span class="line">s.writeFloat(map.loadFactor());</span><br><span class="line"></span><br><span class="line"><span class="comment">// Write out size</span></span><br><span class="line">s.writeInt(map.size());</span><br><span class="line"></span><br><span class="line"><span class="comment">// Write out all elements in the proper order.</span></span><br><span class="line"><span class="keyword">for</span> (E e : map.keySet())</span><br><span class="line">s.writeObject(e);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Reconstitute the &lt;tt&gt;HashSet&lt;/tt&gt; instance from a stream (that is,</span></span><br><span class="line"><span class="comment">* deserialize it).</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(java.io.ObjectInputStream s)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> java.io.IOException, ClassNotFoundException </span>&#123;</span><br><span class="line"><span class="comment">// Read in any hidden serialization magic</span></span><br><span class="line">s.defaultReadObject();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Read capacity and verify non-negative.</span></span><br><span class="line"><span class="keyword">int</span> capacity = s.readInt();</span><br><span class="line"><span class="keyword">if</span> (capacity &lt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> InvalidObjectException(<span class="string">&quot;Illegal capacity: &quot;</span> +</span><br><span class="line">capacity);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Read load factor and verify positive and non NaN.</span></span><br><span class="line"><span class="keyword">float</span> loadFactor = s.readFloat();</span><br><span class="line"><span class="keyword">if</span> (loadFactor &lt;= <span class="number">0</span> || Float.isNaN(loadFactor)) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> InvalidObjectException(<span class="string">&quot;Illegal load factor: &quot;</span> +</span><br><span class="line">loadFactor);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Read size and verify non-negative.</span></span><br><span class="line"><span class="keyword">int</span> size = s.readInt();</span><br><span class="line"><span class="keyword">if</span> (size &lt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> InvalidObjectException(<span class="string">&quot;Illegal size: &quot;</span> +</span><br><span class="line">size);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Set the capacity according to the size and load factor ensuring that</span></span><br><span class="line"><span class="comment">// the HashMap is at least 25% full but clamping to maximum capacity.</span></span><br><span class="line">capacity = (<span class="keyword">int</span>) Math.min(size * Math.min(<span class="number">1</span> / loadFactor, <span class="number">4.0f</span>),</span><br><span class="line">HashMap.MAXIMUM_CAPACITY);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Constructing the backing map will lazily create an array when the first element is</span></span><br><span class="line"><span class="comment">// added, so check it before construction. Call HashMap.tableSizeFor to compute the</span></span><br><span class="line"><span class="comment">// actual allocation size. Check Map.Entry[].class since it&#x27;s the nearest public type to</span></span><br><span class="line"><span class="comment">// what is actually created.</span></span><br><span class="line"></span><br><span class="line">SharedSecrets.getJavaOISAccess()</span><br><span class="line">.checkArray(s, Map.Entry[].class, HashMap.tableSizeFor(capacity));</span><br><span class="line"></span><br><span class="line"><span class="comment">// Create backing HashMap</span></span><br><span class="line">map = (((HashSet&lt;?&gt;)<span class="keyword">this</span>) <span class="keyword">instanceof</span> LinkedHashSet ?</span><br><span class="line"><span class="keyword">new</span> LinkedHashMap&lt;E,Object&gt;(capacity, loadFactor) :</span><br><span class="line"><span class="keyword">new</span> HashMap&lt;E,Object&gt;(capacity, loadFactor));</span><br><span class="line"></span><br><span class="line"><span class="comment">// Read in all elements in the proper order.</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;size; i++) &#123;</span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">E e = (E) s.readObject();</span><br><span class="line">map.put(e, PRESENT);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Creates a &lt;em&gt;&lt;a href=&quot;Spliterator.html#binding&quot;&gt;late-binding&lt;/a&gt;&lt;/em&gt;</span></span><br><span class="line"><span class="comment">* and &lt;em&gt;fail-fast&lt;/em&gt; &#123;<span class="doctag">@link</span> Spliterator&#125; over the elements in this</span></span><br><span class="line"><span class="comment">* set.</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* &lt;p&gt;The &#123;<span class="doctag">@code</span> Spliterator&#125; reports &#123;<span class="doctag">@link</span> Spliterator#SIZED&#125; and</span></span><br><span class="line"><span class="comment">* &#123;<span class="doctag">@link</span> Spliterator#DISTINCT&#125;.  Overriding implementations should document</span></span><br><span class="line"><span class="comment">* the reporting of additional characteristic values.</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> a &#123;<span class="doctag">@code</span> Spliterator&#125; over the elements in this set</span></span><br><span class="line"><span class="comment">* <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Spliterator&lt;E&gt; <span class="title">spliterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> HashMap.KeySpliterator&lt;E,Object&gt;(map, <span class="number">0</span>, -<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Process</title>
    <url>/2022/07/19/Process/</url>
    <content><![CDATA[<h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><p>The code we write is just a static file stored on the hard disk, which is compiled to generate a binary executable file. When we run this executable file, it will be loaded into memory and then the CPU will execute every instruction in the program, so this running program is called a “process”.</p>
<p>Now let’s consider a program that reads data from a hard disk file is executed, so when the instruction to read the file is run, it will read the data from the hard disk, but the read/write speed of the hard disk is very slow, so at this time, if the CPU foolishly waits for the hard disk to return the data, then the CPU utilization is very low.</p>
<p>To draw an analogy, when you go to boil water, you will be stupid to wait for the kettle to boil? Obviously, children don’t wait around either. We can do other things before the kettle boils. When the kettle boils, we will naturally hear the “beep beep beep” sound and pour the boiled water into the cup.</p>
<p>So, when a process wants to read data from the hard disk, the CPU does not need to block and wait for the data to be returned, but goes on to execute another process. When the hard disk data returns, the CPU receives an interrupt, so the CPU continues to run the process again.</p>
<p>This idea of multiple, alternating processes gives the initial idea of the CPU managing multiple processes.</p>
<p>For a system that supports multiple processes, the CPU will quickly switch from one process to another, with each process running for tens or hundreds of milliseconds in between.</p>
<p>Although a single-core CPU can only run one process at a given instant. However, during a 1-second period, it may run multiple processes, thus creating the illusion of parallelism, which is actually concurrency.</p>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Real-time chat WebApp</title>
    <url>/2022/01/11/Real-time-chat-WebApp/</url>
    <content><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>The project is divided into four modules: user list, message list, personal center, login and registration; the backend is Node.js, the database is MongoDB, with the front-end react technology stack to achieve front-end and back-end intermodulation. Users are divided into two roles: student and teacher. User registration can choose the role, after successful registration need to improve the information (students: avatar, grade, personal profile; teachers: avatar, teaching subjects, personal profile). After perfecting the information, students will jump to the student list page and teachers will jump to the teacher list page. And you can click on each other to chat with them. If there are unread messages, the number of unread messages is displayed on the message list in the bottom navigation. Clicking on an unread message reduces the number of unread messages accordingly. Focus on the use of Redux to store user information, user list information, chat information, and the number of unread messages. Implementing axios asynchronous requests using thunk middleware and Socket.io for real time communication between two user roles.</p>
<h2 id="Function"><a href="#Function" class="headerlink" title="Function"></a>Function</h2><ul>
<li>User registration login, logout login</li>
<li>Improve user information after registration is completed</li>
<li>Jump to the corresponding page according to different roles</li>
<li>User chat function</li>
</ul>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><blockquote>
<p>enter recruiment_font_end</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Installing Dependencies</span></span><br><span class="line">npm install</span><br><span class="line"></span><br><span class="line"><span class="comment"># Launch Project</span></span><br><span class="line">npm run dev</span><br><span class="line"></span><br><span class="line"><span class="comment"># Package Release</span></span><br><span class="line">npm run build</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p>enter server</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Installing Dependencies</span></span><br><span class="line"></span><br><span class="line">npm install</span><br><span class="line"></span><br><span class="line"><span class="comment"># enter bin</span></span><br><span class="line">node www</span><br><span class="line"></span><br></pre></td></tr></table></figure>


]]></content>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2022/01/10/Hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
      <tags>
        <tag>Life</tag>
      </tags>
  </entry>
  <entry>
    <title>Stack source code analysis</title>
    <url>/2022/07/15/Stack%20source%20code%20analysis/</url>
    <content><![CDATA[<h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><p>First-in, last-out, inherited from Vector, so it is thread-safe. Legacy class, not recommended, available Deque mock battle. Essentially still implemented with arrays, the end of the array is the top of the stack. </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Deque&lt;Integer&gt; stack = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">stack.addFirst(<span class="number">12</span>);</span><br><span class="line">stack.pollFirst();</span><br></pre></td></tr></table></figure>

<h3 id="Source-Code"><a href="#Source-Code" class="headerlink" title="Source Code"></a>Source Code</h3><p>Source Code is easy.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> java.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stack</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">Vector</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Creates an empty Stack.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Stack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">push</span><span class="params">(E item)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Add to the end of the array</span></span><br><span class="line">        addElement(item);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> item;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> E <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        E       obj;</span><br><span class="line">        <span class="keyword">int</span>     len = size();</span><br><span class="line">        <span class="comment">// Get the last element of the array</span></span><br><span class="line">        obj = peek();</span><br><span class="line">        <span class="comment">// Delete the last element of the array</span></span><br><span class="line">        removeElementAt(len - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Looks at the object at the top of this stack without removing it</span></span><br><span class="line"><span class="comment">     * from the stack.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>  the object at the top of this stack (the last item</span></span><br><span class="line"><span class="comment">     *          of the &lt;tt&gt;Vector&lt;/tt&gt; object).</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span>  EmptyStackException  if this stack is empty.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> E <span class="title">peek</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>     len = size();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (len == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> EmptyStackException();</span><br><span class="line">        <span class="keyword">return</span> elementAt(len - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Tests if this stack is empty.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>  &lt;code&gt;true&lt;/code&gt; if and only if this stack contains</span></span><br><span class="line"><span class="comment">     *          no items; &lt;code&gt;false&lt;/code&gt; otherwise.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">empty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size() == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Returns the index position where o is located</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">int</span> <span class="title">search</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = lastIndexOf(o);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (i &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> size() - i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** use serialVersionUID from JDK 1.0.2 for interoperability */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1224463164541339165L</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>TreeSet source code analysis</title>
    <url>/2022/08/01/TreeSet%20source%20code%20analysis/</url>
    <content><![CDATA[<h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><p>TreeSet is an unordered, non-repeating set, unordered means that it is impossible to traverse the TreeSet in the order of insertion, because the TreeSet will sort the inserted elements, the default is the natural sort, you can also customize the sorting rules.</p>
<p>TreeSet is implemented through TreeMap, the key of TreeMap is the set of TreeSet does not repeat, the value of TreeMap are pointed to the same Object instance, in essence, or through the red-black tree implementation.</p>
<h3 id="Construction-method"><a href="#Construction-method" class="headerlink" title="Construction method"></a>Construction method</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> NavigableMap&lt;E,Object&gt; m;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Dummy value to associate with an Object in the backing Map</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object PRESENT = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Constructs a set backed by the specified navigable map.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">TreeSet(NavigableMap&lt;E,Object&gt; m) &#123;</span><br><span class="line"><span class="keyword">this</span>.m = m;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">TreeSet</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>(<span class="keyword">new</span> TreeMap&lt;E,Object&gt;());</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">TreeSet</span><span class="params">(Comparator&lt;? <span class="keyword">super</span> E&gt; comparator)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>(<span class="keyword">new</span> TreeMap&lt;&gt;(comparator));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">TreeSet</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>();</span><br><span class="line">addAll(c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">TreeSet</span><span class="params">(SortedSet&lt;E&gt; s)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>(s.comparator());</span><br><span class="line">addAll(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>NavigableMap is an interface, which TreeMap implements, with stronger search capabilities.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">TreeSet</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>();</span><br><span class="line">addAll(c);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">TreeSet</span><span class="params">(SortedSet&lt;E&gt; s)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>(s.comparator());</span><br><span class="line">addAll(s);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span>  <span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class="line"><span class="comment">// Use linear-time version if applicable</span></span><br><span class="line"><span class="comment">// c is not null and is of type SortedSet.</span></span><br><span class="line"><span class="keyword">if</span> (m.size()==<span class="number">0</span> &amp;&amp; c.size() &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">c <span class="keyword">instanceof</span> SortedSet &amp;&amp;</span><br><span class="line">m <span class="keyword">instanceof</span> TreeMap) &#123;</span><br><span class="line">SortedSet&lt;? extends E&gt; set = (SortedSet&lt;? extends E&gt;) c;</span><br><span class="line">TreeMap&lt;E,Object&gt; map = (TreeMap&lt;E, Object&gt;) m;</span><br><span class="line">Comparator&lt;?&gt; cc = set.comparator();</span><br><span class="line">Comparator&lt;? <span class="keyword">super</span> E&gt; mc = map.comparator();</span><br><span class="line"><span class="comment">// Inserting c into the red-black tree</span></span><br><span class="line"><span class="keyword">if</span> (cc==mc || (cc != <span class="keyword">null</span> &amp;&amp; cc.equals(mc))) &#123;</span><br><span class="line">map.addAllForTreeSet(set, PRESENT);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">super</span>.addAll(c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Add-method"><a href="#Add-method" class="headerlink" title="Add method"></a>Add method</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> m.put(e, PRESENT)==<span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>TCP 3-Way Handshake</title>
    <url>/2022/08/02/TCP%203-Way%20Handshake/</url>
    <content><![CDATA[<h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><p>The 3-Way Handshake protocol refers to the three interactions between the server and the client in the preparation phase of sending data.</p>
<h3 id="Process"><a href="#Process" class="headerlink" title="Process"></a>Process</h3><p>Assume that A is the client and B is the server.</p>
<p>First B is in the LISTEN state, waiting for a connection request from a client.</p>
<p>A sends a connection request message to B with SYN=1 and ACK=0, choosing an initial serial number x.</p>
<p>B receives the connection request message and, if it agrees to establish a connection, sends a connection confirmation message to A with SYN=1, ACK=1, and an acknowledgement number of x+1, and also selects an initial sequence number y.</p>
<p>After receiving the connection confirmation message from B, A also sends an acknowledgement to B with acknowledgement number y+1 and sequence number x+1.</p>
<p>After B receives A’s acknowledgement, the connection is established.</p>
<h3 id="Why-does-the-TCP-client-have-to-send-an-acknowledgement-at-the-end-The-reason-for-the-3-Way-Handshake"><a href="#Why-does-the-TCP-client-have-to-send-an-acknowledgement-at-the-end-The-reason-for-the-3-Way-Handshake" class="headerlink" title="Why does the TCP client have to send an acknowledgement at the end? The reason for the 3-Way Handshake?"></a>Why does the TCP client have to send an acknowledgement at the end? The reason for the 3-Way Handshake?</h3><p>Prevent connection request messages that have failed from suddenly being delivered to the server again, thus generating errors.</p>
<p>If the connection is established using 2-Way Handshake, suppose there is a scenario where the client sends the first request for a connection and does not lose it, but because it stays in the network node for too long, the TCP client is late in receiving the acknowledgement message and thinks that the server did not receive it, so it resends the message to the server, after which the client and server complete the connection after two handshakes. The client and server then complete the connection after two handshakes, transfer the data, and close the connection. At this point, the previously lagged request connection, the network is open to reach the server, the message should have been invalid, but the mechanism of two handshakes will allow the client and server to establish a connection again, which will lead to unnecessary errors and waste of resources.</p>
<p>If 3-Way Handshake are used, even if the failed message is transmitted, the server accepts the failed message and replies with an acknowledgement, but the client does not send another acknowledgement. Since the server does not receive an acknowledgement, it knows that the client did not request the connection.</p>
]]></content>
      <tags>
        <tag>TCP</tag>
        <tag>Handshaking</tag>
      </tags>
  </entry>
  <entry>
    <title>QR code scanning login process</title>
    <url>/2022/08/05/QR%20code%20scanning%20login%20process/</url>
    <content><![CDATA[<h3 id="Pending-scanning-phase"><a href="#Pending-scanning-phase" class="headerlink" title="Pending scanning phase"></a>Pending scanning phase</h3><p>This phase has nothing to do with the mobile side, but is the interaction process between the PC side and the server side.</p>
<p>First of all, the PC side carries the device information and wants to launch the request for QR code generation from the server side, which will generate a unique QR code ID, which you can understand as UUID, and associate the QR code ID with the PC device information, which is somewhat similar to the mobile login.</p>
<p>After the PC side receives the QR code ID, the QR code ID will be displayed in the form of QR code and wait for the mobile side to scan the code. At this time, a timer will be started on the PC side to poll for the status of the QR code. If the mobile side is not scanned, then the QR code will be invalid after a period of time.</p>
<h3 id="Scanned-pending-confirmation-stage"><a href="#Scanned-pending-confirmation-stage" class="headerlink" title="Scanned pending confirmation stage"></a>Scanned pending confirmation stage</h3><p>This stage is the process of interaction between the mobile side and the server side.</p>
<p>First, the mobile side scans the QR code, gets the QR code ID, and then sends the login credentials (token) and the QR code ID as parameters to the server side.</p>
<p>After the server accepts the request, it will associate the token with the QR code ID, why do you need to associate it? If you think about it, when we use WeChat, the mobile side exits, the PC side also needs to exit. Then a one-time token will be generated, and this token will be returned to the mobile side, and the one-time token will be used as a credential for confirmation.</p>
<p>The timer on the PC side will poll to see that the status of the QR code has changed, and will update the QR code on the PC side to scanned, please confirm.</p>
<h3 id="Confirmed-stage"><a href="#Confirmed-stage" class="headerlink" title="Confirmed stage"></a>Confirmed stage</h3><p>This stage is the final stage of the code login, the mobile side carries the temporary token obtained in the previous step to confirm the login, and the server side will update the QR code status and generate an official token for the PC side after the proofreading is completed.</p>
<p>The timer on the PC side will poll the QR code status for login and get the generated token to complete the login, and subsequent visits will be done based on the token.</p>
<p>On the server side, the token, QR code, PC device information, and account information are maintained, just like on the cell phone side. </p>
]]></content>
      <tags>
        <tag>QR code</tag>
      </tags>
  </entry>
  <entry>
    <title>ArrayQueue source code analysis</title>
    <url>/2022/08/15/ArrayQueue%20source%20code%20analysis/</url>
    <content><![CDATA[<h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><p>Array queue, essentially still an array, but not necessarily an Object array, any array can be, you can use a custom class. It has all the properties of an array. The special feature is that this queue has a head and tail pointer, so it does not have to store elements from index 0. The last element is not necessarily the last position of the array, similar to a ring queue.</p>
<p>This array queue must specify the initial capacity, and there is no empty constructor. It is not a dynamic array and will not be automatically expanded unless its resize method is called. When the queue is full, an exception is thrown directly.</p>
<h3 id="Source-Code"><a href="#Source-Code" class="headerlink" title="Source Code"></a>Source Code</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    </span><br><span class="line"><span class="keyword">package</span> com.sun.jmx.remote.internal;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.AbstractList;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayQueue</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractList</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ArrayQueue</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.capacity = capacity + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">this</span>.queue = newArray(capacity + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">this</span>.head = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">this</span>.tail = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">resize</span><span class="params">(<span class="keyword">int</span> newcapacity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> size = size();</span><br><span class="line">        <span class="keyword">if</span> (newcapacity &lt; size)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">&quot;Resizing would lose data&quot;</span>);</span><br><span class="line">        newcapacity++;</span><br><span class="line">        <span class="keyword">if</span> (newcapacity == <span class="keyword">this</span>.capacity)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        T[] newqueue = newArray(newcapacity);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">            newqueue[i] = get(i);</span><br><span class="line">        <span class="keyword">this</span>.capacity = newcapacity;</span><br><span class="line">        <span class="keyword">this</span>.queue = newqueue;</span><br><span class="line">        <span class="keyword">this</span>.head = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">this</span>.tail = size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> T[] newArray(<span class="keyword">int</span> size) &#123;</span><br><span class="line">        <span class="keyword">return</span> (T[]) <span class="keyword">new</span> Object[size];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(T o)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Add to the end of the queue</span></span><br><span class="line">        queue[tail] = o;</span><br><span class="line">        <span class="keyword">int</span> newtail = (tail + <span class="number">1</span>) % capacity;</span><br><span class="line">        <span class="comment">// The queue is full</span></span><br><span class="line">        <span class="keyword">if</span> (newtail == head)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">&quot;Queue full&quot;</span>);</span><br><span class="line">        tail = newtail;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>; <span class="comment">// we did add something</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">remove</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (i != <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Can only remove head of queue&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (head == tail)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">&quot;Queue empty&quot;</span>);</span><br><span class="line">        T removed = queue[head];</span><br><span class="line">        queue[head] = <span class="keyword">null</span>;</span><br><span class="line">        head = (head + <span class="number">1</span>) % capacity;</span><br><span class="line">        <span class="keyword">return</span> removed;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">get</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Dynamically find the number of elements each time</span></span><br><span class="line">        <span class="keyword">int</span> size = size();</span><br><span class="line">        <span class="comment">// Check if i is legal</span></span><br><span class="line">        <span class="keyword">if</span> (i &lt; <span class="number">0</span> || i &gt;= size) &#123;</span><br><span class="line">            <span class="keyword">final</span> String msg = <span class="string">&quot;Index &quot;</span> + i + <span class="string">&quot;, queue size &quot;</span> + size;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(msg);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> index = (head + i) % capacity;</span><br><span class="line">        <span class="keyword">return</span> queue[index];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Can&#x27;t use % here because it&#x27;s not mod: -3 % 2 is -1, not +1.</span></span><br><span class="line">        <span class="keyword">int</span> diff = tail - head;</span><br><span class="line">        <span class="keyword">if</span> (diff &lt; <span class="number">0</span>)</span><br><span class="line">            diff += capacity;</span><br><span class="line">        <span class="keyword">return</span> diff;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> capacity;</span><br><span class="line">    <span class="keyword">private</span> T[] queue;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> head;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> tail;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
</search>
